"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class robot_data_lcmt(object):
    __slots__ = ["q", "qd", "tau", "quat", "rpy", "acc", "omega", "ctrl_topic_interval"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [[12], [12], [12], [4], [3], [3], [3], None]

    def __init__(self):
        self.q = [ 0.0 for dim0 in range(12) ]
        self.qd = [ 0.0 for dim0 in range(12) ]
        self.tau = [ 0.0 for dim0 in range(12) ]
        self.quat = [ 0.0 for dim0 in range(4) ]
        self.rpy = [ 0.0 for dim0 in range(3) ]
        self.acc = [ 0.0 for dim0 in range(3) ]
        self.omega = [ 0.0 for dim0 in range(3) ]
        self.ctrl_topic_interval = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(robot_data_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>12f', *self.q[:12]))
        buf.write(struct.pack('>12f', *self.qd[:12]))
        buf.write(struct.pack('>12f', *self.tau[:12]))
        buf.write(struct.pack('>4f', *self.quat[:4]))
        buf.write(struct.pack('>3f', *self.rpy[:3]))
        buf.write(struct.pack('>3f', *self.acc[:3]))
        buf.write(struct.pack('>3f', *self.omega[:3]))
        buf.write(struct.pack(">f", self.ctrl_topic_interval))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != robot_data_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return robot_data_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = robot_data_lcmt()
        self.q = struct.unpack('>12f', buf.read(48))
        self.qd = struct.unpack('>12f', buf.read(48))
        self.tau = struct.unpack('>12f', buf.read(48))
        self.quat = struct.unpack('>4f', buf.read(16))
        self.rpy = struct.unpack('>3f', buf.read(12))
        self.acc = struct.unpack('>3f', buf.read(12))
        self.omega = struct.unpack('>3f', buf.read(12))
        self.ctrl_topic_interval = struct.unpack(">f", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if robot_data_lcmt in parents: return 0
        tmphash = (0xc715bbe9d5025685) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if robot_data_lcmt._packed_fingerprint is None:
            robot_data_lcmt._packed_fingerprint = struct.pack(">Q", robot_data_lcmt._get_hash_recursive([]))
        return robot_data_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", robot_data_lcmt._get_packed_fingerprint())[0]

